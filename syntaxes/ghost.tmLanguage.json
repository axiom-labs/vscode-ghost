{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ghost",

	"patterns": [
		{ "include": "#comments" },
		{ "include": "#keywords" },
		{ "include": "#statements" },
		{ "include": "#callables" },
		{ "include": "#ident" },
		{ "include": "#strings" },
		{ "include": "#digits" }
	],

	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ghost",
					"match": "\\b(if|else|while|for|return)\\b"
				},
				{
					"name": "keyword.operator.logical.ghost",
					"match": "\\b(and|or)\\b"
				},
				{
					"name": "keyword.operator.arithmetic.ghost",
					"match": "(\\-|\\+|\\*|\/|%)"
				},
				{
					"name": "keyword.operator.comparison.ghost",
					"match": "(==|!=|<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.assignment.ghost",
					"match": "(=)"
				},
				{
					"name": "constant.language.null.ghost",
					"match": "\\b(null)\\b"
				},
				{
					"name": "constant.language.boolean.ghost",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "support.function.builtin.ghost",
					"match": "\\b(print|write|error|assert)\\b"
				},
				{
					"name": "variable.language.this.ghost",
					"match": "\\b(this)\\b"
				},
				{
					"name": "variable.language.super.ghost",
					"match": "\\b(super)\\b"
				}
			]
		},
		"statements": {
			"patterns": [
				{
					"match": "\\b(var)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "storage.type.ghost"
						},
						"2": {
							"name": "support.variable.ghost"
						}
					}
				},
				{
					"match": "\\b(function)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(([A-Za-z0-9,\\s]*)\\)",
					"captures": {
						"1": {
							"name": "storage.type.function.ghost"
						},
						"2": {
							"name": "entity.name.function.ghost"
						},
						"3": {
							"patterns": [
								{
									"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
									"name": "variable.parameter.ghost"
								}
							]
						}
					}
				},
				{
					"match": "\\b(class)\\s+([A-Za-z_][A-Za-z0-9_]*)(?:\\s*(<)\\s*([A-Za-z_][A-Za-z0-9_]*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.class.ghost"
						},
						"2": {
							"name": "entity.name.type.class.ghost"
						},
						"3": {
							"name": "storage.modifer.ghost"
						},
						"4": {
							"name": "entity.name.type.class.ghost"
						}
					}
				}
			]
		},
		"callables": {
			"patterns": [
				{
					"match": "([A-Za-z_][A-Za-z0-9_]*)\\(",
					"name": "support.function.ghost"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.ghost",
			"begin": "\"",
			"end": "\"",
			"patterns": []
		},
		"digits": {
			"patterns": [
				{
					"name": "constant.numeric.ghost",
					"match": "\\b[0-9]+(?:.[0-9]+)?\\b"
				}
			]
		},
		"ident": {
			"patterns": [
				{
					"name": "variable.other.readwrite.ghost",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.ghost",
					"match": "\\/\\.*"
				}
			]
		}
	},

	"scopeName": "source.ghost"
}