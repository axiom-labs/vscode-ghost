{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ghost",

	"patterns": [
		{ "include": "#code" },
		{ "include": "#class" }
	],

	"repository": {
		"comment": {
			"name": "comment.line.ghost",
			"match": "//.*"
		},
		"block": {
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.block.begin.ghost"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.block.end.ghost"
				}
			},
			"name": "meta.block.ghost",
			"patterns": [
				{
					"include": "#code"
				},
				{
					"name": "meta.block.parameters.ghost",
					"begin": "\\|",
					"end": "\\|",
					"patterns": [
						{
							"name": "variable.parameter.function.ghost",
							"match": "\\w+"
						}
					]
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.control.ghost",
					"match": "\\b(?:break|else|for|if|import|in|return|while|var|class|function)\\b"
				},
				{
					"name": "keyword.operator.ghost",
					"match": "\\b(is)\\b"
				},
				{
					"name": "keyword.operator.logical.ghost",
					"match": "!|and|or"
				},
				{
					"name": "keyword.operator.range.ghost",
					"match": "(\\.\\.\\.?)"
				},
				{
					"name": "keyword.operator.arithmetic.ghost",
					"match": "(\\-|\\+|\\*|\/)"
				},
				{
					"name": "keyword.operator.comparison.ghost",
					"match": "(==|!=|<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.assignment.ghost",
					"match": "(=)"
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"name": "constant.language.ghost",
					"match": "\\b(true|false|null)\\b"
				},
				{
					"name": "constant.numeric.ghost",
					"match": "\\b(0x[0-9a-fA-F]*[0-9]+(\\.?[0.9]*)?(e(\\+|-)?[0-9]+)?)\\b"
				},
				{
					"name": "constant.numeric.hexadecimal.ghost",
					"match": "0x[A-Fa-f0-9]+"
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"name": "variable.language.ghost",
					"match": "\\b(this|super)\\b"
				},
				{
					"name": "variable.other.class.ghost",
					"match": "\\b__\\w*"
				},
				{
					"name": "variable.other.instance.ghost",
					"match": "\\b_\\w*"
				}
			]
		},
		"string": {
			"name": "string.quoted.double.ghost",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{ "include": "#stringEscapes" }
			]
		},
		"stringEscapes": {
			"patterns": [
				{
					"name": "constant.character.escape.ghost",
					"match": "\\\\(?:[0\"\\abfnrtv]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{4})"
				},
				{
					"name": "invalid.illegal.uknown-escape.ghost",
					"match": "\\\\(?:x[0-9A-Fa-f]{0,1}|u[0-9A-Fa-f]{0,3}|U[0-9A-Fa-f]{0,7}|.)"
				},
				{
					"name": "constant.character.interpolation.ghost",
					"match": "%\\((.*?)\\)"
				}
			]
		},
		"code": {
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#block" },
				{ "include": "#keyword" },
				{ "include": "#constant" },
				{ "include": "#variable" },
				{ "include": "#string" }
			]
		},
		"method": {
			"name": "meta.method.ghost",
			"begin": "(?:\\b(__construct)\\s+)?(\\w+=|\\w+|\\+|-|\\*|\\/|%|<=?|>=?|==|!=?|&|\\||~)",
			"beginCaptures": {
				"1": { "name": "storage.modifier.ghost" },
				"2": { "name": "entity.name.function.ghost" }
			},
			"end": "}",
			"patterns": [
				{
					"name": "meta.method.identifier.ghost",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"name": "variable.parameter.function.ghost",
							"match": "\\w+"
						}
					]
				},
				{
					"name": "meta.method.body.ghost",
					"begin": "{",
					"end": "(?=})",
					"patterns": [
						{ "include": "#code" }
					]
				}
			]
		},

		"class": {
			"name": "meta.class.ghost",
			"begin": "(?:\\b(foreign)\\s+)?(\\bclass)\\s+(\\w+)\\s+(?:(\\bis)\\s+(\\w+))?",
			"beginCaptures": {
				"1": { "name": "storage.modifier.ghost" },
				"2": { "name": "storage.modifier.ghost" },
				"3": { "name": "entity.name.class.ghost" },
				"4": { "name": "storage.modifier.ghost" },
				"5": { "name": "entity.name.class.ghost" }
			},
			"end": "}",
			"endCaptures": {
				"0": { "name": "punctuation.section.class.end.ghost" }
			},
			"patterns": [
				{
					"name": "meta.class.body.ghost",
					"begin": "{",
					"beginCaptures": {
						"0": { "name": "punctuation.section.class.begin.ghost" }
					},
					"patterns": [
						{ "include": "#comment" },
						{ "include": "#method" }
					],
					"end": "(?=})"
				}
			]
		}
	},
	"scopeName": "source.ghost"
}