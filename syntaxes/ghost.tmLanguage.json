{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ghost",
	"patterns": [
		{ "include": "#keywords" },
		{ "include": "#strings" },
		{ "include": "#comments" },
		{ "include": "#functions" },
		{ "include": "#constants" },
		{ "include": "#puncuation" },
		{ "include": "#variable" }
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.function.ghost",
					"match": "\\b(function)\\b"
				},
				{
					"name": "keyword.control.ghost",
					"match": "\\b(if|else|return|while|for|in)\\b"
				},
				{
					"name": "keyword.operator.logical.ghost",
					"match": "\\b(and|or)\\b"
				},
				{
					"name": "keyword.operator.arithmetic.ghost",
					"match": "(\\-|\\+|\\*|\/|%)"
				},
				{
					"name": "keyword.operator.comparison.ghost",
					"match": "(==|!=|<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.assignment.ghost",
					"match": "(:=|=|\\+=|\\-=|\\*=|/=|%=)"
				},
				{
					"name": "keyword.operator.decrement.ghost",
					"match": "\\-\\-"
				},
				{
					"name": "keyword.operator.increment.ghost",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.ellipsis.ghost",
					"match": "(\\.\\.|\\.\\.\\.)"
				},
				{
					"name": "keyboard.control.class.ghost",
					"match": "\\b(class|new|this)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.null.ghost",
					"match": "\\b(null)\\b"
				},
				{
					"name": "constant.language.boolean.ghost",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.floating-point.ghost",
					"match": "(\\.\\d+([Ee][-+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][-+]\\d+)?i?\\b)?"
				},
				{
					"name": "constant.numeric.integer.ghost",
					"match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.ghost",
					"begin": "//",
					"end": "\n"
				},
				{
					"name": "comment.block.ghost",
					"begin": "\/[*]",
					"end": "[*](\/)"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "support.function.ghost",
					"match": "\\b(exit|first|identifiers|input|last|length|number|print|push|random|sleep|string|tail|type)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.single.ghost",
					"begin": "'",
					"end": "'"
				},
				{
					"name": "string.quoted.double.ghost",
					"begin": "\"",
					"end": "\""
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.terminator.ghost",
					"match": ";"
				},
				{
					"name": "punctuation.other.comma.ghost",
					"match": ","
				},
				{
					"name": "punctuation.other.period.ghost",
					"match": "\\.(?!\\.)"
				},
				{
					"name": "punctuation.other.colon.ghost",
					"match": ":(?!=)"
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"name": "variable.other.readwrite.ghost",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
				},
				{
					"match": "\\w+(?=\\s\\:\\=)",
					"name": "variable.other.assignment.ghost"
				},
				{
					"comment": "increment",
					"match": "(?>\\w+)(?=\\+\\+)",
					"name": "variable.other.ghost"
				},
				{
					"comment": "decrement",
					"match": "(?>\\w+)(?=\\-\\-)",
					"name": "variable.other.ghost"
				}
			]
		},
		"entity": {
			"patterns": [
				{
					"match": "\\b(function)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(([A-Za-z0-9,\\s]*)\\)",
					"captures": {
						"1": {
							"name": "storage.type.function.ghost"
						},
						"2": {
							"name": "entity.name.function.ghost"
						},
						"3": {
							"patterns": [
								{
									"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
									"name": "variable.parameter.ghost"
								}
							]
						}
					}
				}
			]
		}
	},
	"scopeName": "source.ghost"
}